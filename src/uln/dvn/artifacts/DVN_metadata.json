{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "_vid",
						"type": "uint32"
					},
					{
						"internalType": "address[]",
						"name": "_messageLibs",
						"type": "address[]"
					},
					{
						"internalType": "address",
						"name": "_priceFeed",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "_signers",
						"type": "address[]"
					},
					{
						"internalType": "uint64",
						"name": "_quorum",
						"type": "uint64"
					},
					{
						"internalType": "address[]",
						"name": "_admins",
						"type": "address[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AccessControlBadConfirmation",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "neededRole",
						"type": "bytes32"
					}
				],
				"name": "AccessControlUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "AddressEmptyCode",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "AddressInsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "executableHash",
						"type": "bytes32"
					}
				],
				"name": "DVN_DuplicatedHash",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DVN_InstructionExpired",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "DVN_InvalidRole",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DVN_InvalidSignatures",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "DVN_InvalidTarget",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "vid",
						"type": "uint32"
					}
				],
				"name": "DVN_InvalidVid",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DVN_OnlySelf",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "EnforcedPause",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ExpectedPause",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailedInnerCall",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MultiSig_OnlySigner",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MultiSig_QuorumIsZero",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "signersSize",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "quorum",
						"type": "uint64"
					}
				],
				"name": "MultiSig_SignersSizeIsLessThanQuorum",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "signer",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "active",
						"type": "bool"
					}
				],
				"name": "MultiSig_StateAlreadySet",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MultiSig_UnorderedSigners",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "SafeERC20FailedOperation",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "Transfer_NativeFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Transfer_ToAddressIsZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Worker_NotAllowed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Worker_OnlyMessageLib",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Worker_RoleRenouncingDisabled",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_index",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "ExecuteFailed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "vid",
								"type": "uint32"
							},
							{
								"internalType": "address",
								"name": "target",
								"type": "address"
							},
							{
								"internalType": "bytes",
								"name": "callData",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "expiration",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "signatures",
								"type": "bytes"
							}
						],
						"indexed": false,
						"internalType": "struct ExecuteParam",
						"name": "param",
						"type": "tuple"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "_hash",
						"type": "bytes32"
					}
				],
				"name": "HashAlreadyUsed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "multiplierBps",
						"type": "uint16"
					}
				],
				"name": "SetDefaultMultiplierBps",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "dstEid",
								"type": "uint32"
							},
							{
								"internalType": "uint64",
								"name": "gas",
								"type": "uint64"
							},
							{
								"internalType": "uint16",
								"name": "multiplierBps",
								"type": "uint16"
							},
							{
								"internalType": "uint128",
								"name": "floorMarginUSD",
								"type": "uint128"
							}
						],
						"indexed": false,
						"internalType": "struct IDVN.DstConfigParam[]",
						"name": "params",
						"type": "tuple[]"
					}
				],
				"name": "SetDstConfig",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "priceFeed",
						"type": "address"
					}
				],
				"name": "SetPriceFeed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "dstEid",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "uint8[]",
						"name": "optionTypes",
						"type": "uint8[]"
					}
				],
				"name": "SetSupportedOptionTypes",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "workerLib",
						"type": "address"
					}
				],
				"name": "SetWorkerLib",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "_quorum",
						"type": "uint64"
					}
				],
				"name": "UpdateQuorum",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "_signer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "_active",
						"type": "bool"
					}
				],
				"name": "UpdateSigner",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"name": "VerifierFeePaid",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "idx",
						"type": "uint256"
					}
				],
				"name": "VerifySignaturesFailed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "lib",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Withdraw",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "allowlistSize",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "dstEid",
								"type": "uint32"
							},
							{
								"internalType": "bytes",
								"name": "packetHeader",
								"type": "bytes"
							},
							{
								"internalType": "bytes32",
								"name": "payloadHash",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "confirmations",
								"type": "uint64"
							},
							{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							}
						],
						"internalType": "struct ILayerZeroDVN.AssignJobParam",
						"name": "_param",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "_options",
						"type": "bytes"
					}
				],
				"name": "assignJob",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "totalFee",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "_dstEid",
						"type": "uint16"
					},
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					},
					{
						"internalType": "uint64",
						"name": "_confirmations",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					}
				],
				"name": "assignJob",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "totalFee",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "defaultMultiplierBps",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "dstEid",
						"type": "uint32"
					}
				],
				"name": "dstConfig",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "gas",
						"type": "uint64"
					},
					{
						"internalType": "uint16",
						"name": "multiplierBps",
						"type": "uint16"
					},
					{
						"internalType": "uint128",
						"name": "floorMarginUSD",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "vid",
								"type": "uint32"
							},
							{
								"internalType": "address",
								"name": "target",
								"type": "address"
							},
							{
								"internalType": "bytes",
								"name": "callData",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "expiration",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "signatures",
								"type": "bytes"
							}
						],
						"internalType": "struct ExecuteParam[]",
						"name": "_params",
						"type": "tuple[]"
					}
				],
				"name": "execute",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "_dstEid",
						"type": "uint32"
					},
					{
						"internalType": "uint64",
						"name": "_confirmations",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_options",
						"type": "bytes"
					}
				],
				"name": "getFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "_dstEid",
						"type": "uint16"
					},
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					},
					{
						"internalType": "uint64",
						"name": "_confirmations",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					}
				],
				"name": "getFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "_eid",
						"type": "uint32"
					}
				],
				"name": "getSupportedOptionTypes",
				"outputs": [
					{
						"internalType": "uint8[]",
						"name": "",
						"type": "uint8[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					}
				],
				"name": "hasAcl",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "_vid",
						"type": "uint32"
					},
					{
						"internalType": "address",
						"name": "_target",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_callData",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "_expiration",
						"type": "uint256"
					}
				],
				"name": "hashCallData",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "priceFeed",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "quorum",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "vid",
								"type": "uint32"
							},
							{
								"internalType": "address",
								"name": "target",
								"type": "address"
							},
							{
								"internalType": "bytes",
								"name": "callData",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "expiration",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "signatures",
								"type": "bytes"
							}
						],
						"internalType": "struct ExecuteParam",
						"name": "_param",
						"type": "tuple"
					}
				],
				"name": "quorumChangeAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "_multiplierBps",
						"type": "uint16"
					}
				],
				"name": "setDefaultMultiplierBps",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "dstEid",
								"type": "uint32"
							},
							{
								"internalType": "uint64",
								"name": "gas",
								"type": "uint64"
							},
							{
								"internalType": "uint16",
								"name": "multiplierBps",
								"type": "uint16"
							},
							{
								"internalType": "uint128",
								"name": "floorMarginUSD",
								"type": "uint128"
							}
						],
						"internalType": "struct IDVN.DstConfigParam[]",
						"name": "_params",
						"type": "tuple[]"
					}
				],
				"name": "setDstConfig",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "_paused",
						"type": "bool"
					}
				],
				"name": "setPaused",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_priceFeed",
						"type": "address"
					}
				],
				"name": "setPriceFeed",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "_quorum",
						"type": "uint64"
					}
				],
				"name": "setQuorum",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_signer",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_active",
						"type": "bool"
					}
				],
				"name": "setSigner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "_eid",
						"type": "uint32"
					},
					{
						"internalType": "uint8[]",
						"name": "_optionTypes",
						"type": "uint8[]"
					}
				],
				"name": "setSupportedOptionTypes",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_workerFeeLib",
						"type": "address"
					}
				],
				"name": "setWorkerFeeLib",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "signerSize",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "signers",
				"outputs": [
					{
						"internalType": "bool",
						"name": "active",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "executableHash",
						"type": "bytes32"
					}
				],
				"name": "usedHashes",
				"outputs": [
					{
						"internalType": "bool",
						"name": "used",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_hash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "_signatures",
						"type": "bytes"
					}
				],
				"name": "verifySignatures",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					},
					{
						"internalType": "enum MultiSig.Errors",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "vid",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_lib",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdrawFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_lib",
						"type": "address"
					},
					{
						"internalType": "address payable",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdrawFeeFromUlnV2",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdrawToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "workerFeeLib",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"AccessControlBadConfirmation()": [
					{
						"details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
					}
				],
				"AccessControlUnauthorizedAccount(address,bytes32)": [
					{
						"details": "The `account` is missing a role."
					}
				],
				"AddressEmptyCode(address)": [
					{
						"details": "There's no code at `target` (it is not a contract)."
					}
				],
				"AddressInsufficientBalance(address)": [
					{
						"details": "The ETH balance of the account is not enough to perform the operation."
					}
				],
				"EnforcedPause()": [
					{
						"details": "The operation failed because the contract is paused."
					}
				],
				"ExpectedPause()": [
					{
						"details": "The operation failed because the contract is not paused."
					}
				],
				"FailedInnerCall()": [
					{
						"details": "A call to an address target failed. The target may have reverted."
					}
				],
				"SafeERC20FailedOperation(address)": [
					{
						"details": "An operation with an ERC20 token failed."
					}
				]
			},
			"events": {
				"Paused(address)": {
					"details": "Emitted when the pause is triggered by `account`."
				},
				"RoleAdminChanged(bytes32,bytes32,bytes32)": {
					"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
				},
				"RoleGranted(bytes32,address,address)": {
					"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
				},
				"RoleRevoked(bytes32,address,address)": {
					"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
				},
				"Unpaused(address)": {
					"details": "Emitted when the pause is lifted by `account`."
				}
			},
			"kind": "dev",
			"methods": {
				"assignJob((uint32,bytes,bytes32,uint64,address),bytes)": {
					"details": "for ULN301, ULN302 and more to assign jobdvn network can reject job from _sender by adding/removing them from allowlist/denylist",
					"params": {
						"_options": "dvn options",
						"_param": "assign job param"
					}
				},
				"assignJob(uint16,uint16,uint64,address)": {
					"details": "to support ULNv2dvn network can reject job from _sender by adding/removing them from allowlist/denylist",
					"params": {
						"": "//_outboundProofType outbound proof type",
						"_confirmations": "block confirmations",
						"_dstEid": "destination EndpointId",
						"_sender": "message sender address"
					}
				},
				"constructor": {
					"details": "DVN doesn't have a roleAdmin (address(0x0))Supports all of ULNv2, ULN301, ULN302 and more",
					"params": {
						"_admins": "array of admin addresses that are granted the ADMIN_ROLE",
						"_messageLibs": "array of message lib addresses that are granted the MESSAGE_LIB_ROLE",
						"_priceFeed": "price feed address",
						"_quorum": "quorum for multisig",
						"_signers": "array of signer addresses for multisig",
						"_vid": "unique identifier for this DVN instance"
					}
				},
				"execute((uint32,address,bytes,uint256,bytes)[])": {
					"details": "takes a list of instructions and executes them in orderif any of the instructions fail, it will emit an error event and continue to execute the rest of the instructions",
					"params": {
						"_params": "array of ExecuteParam, includes target, callData, expiration, signatures"
					}
				},
				"getFee(uint16,uint16,uint64,address)": {
					"details": "to support ULNv2getFee can revert if _sender doesn't pass ACL",
					"params": {
						"": "//_outboundProofType outbound proof type",
						"_confirmations": "block confirmations",
						"_dstEid": "destination EndpointId",
						"_sender": "message sender address"
					}
				},
				"getFee(uint32,uint64,address,bytes)": {
					"details": "getFee can revert if _sender doesn't pass ACL",
					"params": {
						"_confirmations": "block confirmations",
						"_dstEid": "destination EndpointId",
						"_options": "dvn options",
						"_sender": "message sender address"
					},
					"returns": {
						"fee": "fee in native amount"
					}
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"grantRole(bytes32,address)": {
					"details": "overrides AccessControl to allow self/admin to grant role'function sig 0x2f2ff15d",
					"params": {
						"_account": "account to grant role to",
						"_role": "role to grant"
					}
				},
				"hasAcl(address)": {
					"details": "Access control list using allowlist and denylist1) if one address is in the denylist -> deny2) else if address in the allowlist OR allowlist is empty (allows everyone)-> allow3) else deny",
					"params": {
						"_sender": "address to check"
					}
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"hashCallData(uint32,address,bytes,uint256)": {
					"params": {
						"_callData": "call data",
						"_expiration": "expiration timestamp",
						"_target": "target address"
					},
					"returns": {
						"_0": "hash of above"
					}
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"quorumChangeAdmin((uint32,address,bytes,uint256,bytes))": {
					"details": "calldata in the case is abi.encode new admin address"
				},
				"renounceRole(bytes32,address)": {
					"details": "overrides AccessControl to disable renouncing of roles"
				},
				"revokeRole(bytes32,address)": {
					"details": "overrides AccessControl to allow self/admin to revoke rolefunction sig 0xd547741f",
					"params": {
						"_account": "account to revoke role from",
						"_role": "role to revoke"
					}
				},
				"setDefaultMultiplierBps(uint16)": {
					"params": {
						"_multiplierBps": "default multiplier for worker fee"
					}
				},
				"setDstConfig((uint32,uint64,uint16,uint128)[])": {
					"params": {
						"_params": "array of DstConfigParam"
					}
				},
				"setPaused(bool)": {
					"details": "flag to pause execution of workers (if used with whenNotPaused modifier)",
					"params": {
						"_paused": "true to pause, false to unpause"
					}
				},
				"setPriceFeed(address)": {
					"params": {
						"_priceFeed": "price feed address"
					}
				},
				"setQuorum(uint64)": {
					"details": "set quorum for multisigfunction sig 0x8585c945",
					"params": {
						"_quorum": "to set"
					}
				},
				"setSigner(address,bool)": {
					"details": "set signers for multisigfunction sig 0x31cb6105",
					"params": {
						"_active": "true to add, false to remove",
						"_signer": "signer address"
					}
				},
				"setWorkerFeeLib(address)": {
					"params": {
						"_workerFeeLib": "worker fee lib address"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"withdrawFee(address,address,uint256)": {
					"details": "supports withdrawing fee from ULN301, ULN302 and more",
					"params": {
						"_amount": "amount to withdraw",
						"_lib": "message lib address",
						"_to": "address to withdraw fee to"
					}
				},
				"withdrawFeeFromUlnV2(address,address,uint256)": {
					"details": "to support ULNv2the withdrawFee function for ULN30X is built in the Worker contract",
					"params": {
						"_amount": "amount to withdraw",
						"_lib": "message lib address",
						"_to": "address to withdraw to"
					}
				},
				"withdrawToken(address,address,uint256)": {
					"details": "supports withdrawing token from the contract",
					"params": {
						"_amount": "amount to withdraw",
						"_to": "address to withdraw token to",
						"_token": "token address"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"quorumChangeAdmin((uint32,address,bytes,uint256,bytes))": {
					"notice": "function for quorum to change admin without going through execute function"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/uln/dvn/DVN.sol": "DVN"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/AccessControl.sol": {
			"keccak256": "0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308",
			"license": "MIT",
			"urls": [
				"bzz-raw://46326c0bb1e296b67185e81c918e0b40501b8b6386165855df0a3f3c634b6a80",
				"dweb:/ipfs/QmTwyrDYtsxsk6pymJTK94PnEpzsmkpUxFuzEiakDopy4Z"
			]
		},
		"@openzeppelin/contracts/access/IAccessControl.sol": {
			"keccak256": "0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41",
			"license": "MIT",
			"urls": [
				"bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26",
				"dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
			"license": "MIT",
			"urls": [
				"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
				"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
				"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
				"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Pausable.sol": {
			"keccak256": "0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd",
			"license": "MIT",
			"urls": [
				"bzz-raw://1a4b83328c98d518a2699c2cbe9e9b055e78aa57fa8639f1b88deb8b3750b5dc",
				"dweb:/ipfs/QmXdcYj5v7zQxXFPULShHkR5p4Wa2zYuupbHnFdV3cHYtc"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf",
			"license": "MIT",
			"urls": [
				"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c",
				"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133",
			"license": "MIT",
			"urls": [
				"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8",
				"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
			"license": "MIT",
			"urls": [
				"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
				"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
			]
		},
		"src/Worker.sol": {
			"keccak256": "0xcd29a8e44fcd63849900f5684456d2d43591b6ad9cf61c32d1a9b70b54272716",
			"license": "MIT",
			"urls": [
				"bzz-raw://91635c6e83531ea8bb4049a31046bbf1c456470db4cc4793c28cb9d3675552ba",
				"dweb:/ipfs/QmZ6Vf3XjK2ryZDsVxBS3sqBeopGSrPpSVHpn8FdmdtGRm"
			]
		},
		"src/interfaces/IWorker.sol": {
			"keccak256": "0x87a014418b7008f542269aeed1b39eead808989797018c9f0c248853ba7d5dee",
			"license": "MIT",
			"urls": [
				"bzz-raw://eac077fdfd6a165f112286d7c0b1a7797a810f6555dc8a68eb990d81bfd83d03",
				"dweb:/ipfs/QmUBQ4BmrSvrRhiFtjbgw1XSDpeFVuycjD5R8YrtcbUxCe"
			]
		},
		"src/l0labs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol": {
			"keccak256": "0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3",
			"license": "MIT",
			"urls": [
				"bzz-raw://bacc29fd3866af71e59cb0bdc1cf82c882a4a7f4e2652fd413c9f12649762083",
				"dweb:/ipfs/QmZh2toLnrQDWaNYhS5K4NoW7Vxd2GdZx9KA77vKEDLAqs"
			]
		},
		"src/l0labs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol": {
			"keccak256": "0x5cf5f24751b4e3ea1c9c5ded07cedfdfd62566b6daaffcc0144733859c9dba0c",
			"license": "MIT",
			"urls": [
				"bzz-raw://cae7e35007a714f007ea08045ef7c0cfa6c91fd2425b5028b2d49abad357a5f0",
				"dweb:/ipfs/QmcDBs5tsiyB35b8cwzWQWNnpkawb3uuHRaqE77Hxm2tve"
			]
		},
		"src/l0labs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol": {
			"keccak256": "0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc",
			"license": "MIT",
			"urls": [
				"bzz-raw://d8ff6a8a89297fa127f86b54e0db3eba1d6a6eeb4f6398d3c84d569665ac8f1b",
				"dweb:/ipfs/QmVSwhw6xFDrLRAX4RXaCM47yBaBtac4wf36DYEq6KCTvT"
			]
		},
		"src/l0labs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol": {
			"keccak256": "0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972",
			"license": "MIT",
			"urls": [
				"bzz-raw://7e1b245d58221d16d8b5e0f01ef3e289a24a7df1ace3b94239e4d5b954ad5927",
				"dweb:/ipfs/Qmappsgp7PCY9rSSNE9Cdn4BTRX591WfCSEgq2HxhA3z6S"
			]
		},
		"src/l0labs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol": {
			"keccak256": "0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901",
			"license": "MIT",
			"urls": [
				"bzz-raw://b18b23a1643fc6636c4ad9d9023e2e6ca2d3c2a4a046482d4655bff09950598d",
				"dweb:/ipfs/Qma6G5SqiovwrMPfgqTrRngK1HWW373Wkf9c6YP2NhXpPk"
			]
		},
		"src/l0labs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol": {
			"keccak256": "0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e",
			"license": "MIT",
			"urls": [
				"bzz-raw://5173fc9143bea314b159ca5a9adb5626659ef763bc598e27de5fa46efe3291a6",
				"dweb:/ipfs/QmSLFeMFPmVeGxT4sxRPW28ictjAS22M8rLeYRu9TXkA6D"
			]
		},
		"src/l0labs/lz-evm-protocol-v2/contracts/interfaces/ISendLib.sol": {
			"keccak256": "0xf1c07bc61e7b1dce195ed12d50f87980fbf2d63cac1326fd28287f55fe0ba625",
			"license": "MIT",
			"urls": [
				"bzz-raw://060f10ff7afc33c1c2f2b4b5ba29231fd3c943146488084d0e4ab99fce991d97",
				"dweb:/ipfs/QmaSsefAqqEqtf8FgFUmDYMwTsAty3X1pqDb6SiFvry6B3"
			]
		},
		"src/l0labs/lz-evm-protocol-v2/contracts/libs/Transfer.sol": {
			"keccak256": "0x621d6dd5b8b7e827351459fff4ac87c16ba4656757592cf67de8b199aea4cf9a",
			"license": "LZBL-1.2",
			"urls": [
				"bzz-raw://345aa8c007ed8b96a74260d289545713f1d7180df270d67687e3a540a61fa5c0",
				"dweb:/ipfs/QmNWCvpqSuar6UGLDVshUc7shUv3pt1J5FTf9VyZZ13wXL"
			]
		},
		"src/l0labs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroUltraLightNodeV2.sol": {
			"keccak256": "0xf1f36bbbc40d03b96affa151affb47da75a1b69dc79f4b311841a072d12fdd22",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://9f4f188c2998ecbda28a389ad8038da15c2260b1df6a8d135b3d96422e292fda",
				"dweb:/ipfs/QmeThR83tcaM4CmxQ2AamTafsgjcbGMfZtYcDHqw2CcwKa"
			]
		},
		"src/uln/dvn/DVN.sol": {
			"keccak256": "0x332aeb8e05548ec622c1998f1f7dedf183945fcea1c2c15031bd8420acb699d9",
			"license": "MIT",
			"urls": [
				"bzz-raw://b9251deb19ac5f3ae76fb809dc605786e0db8b00f8a299d1777a7f6f4bc8375c",
				"dweb:/ipfs/QmWNK5SSwXyRodkvnfttDe14QLLf5bqaTpT72uyU1TfujL"
			]
		},
		"src/uln/dvn/MultiSig.sol": {
			"keccak256": "0x3a11041eb2c837049fa6d0e78348f36bcba65742a0cc185fedd952de7e73369f",
			"license": "MIT",
			"urls": [
				"bzz-raw://1af7b46076f149bc38db2184f6b87da3b9b47a0560182d951b82305990812ed0",
				"dweb:/ipfs/QmWBubVeKcnVqPT2ArupHWiUeVcrPcYj9Buz9ecRaErvKG"
			]
		},
		"src/uln/interfaces/IDVN.sol": {
			"keccak256": "0x59fa0c942cd3dc6a2173e1fc8fb8e52c7c1247077e41a84949f7e44c0722c888",
			"license": "MIT",
			"urls": [
				"bzz-raw://371b8881434c216509d06bdfcb0588edc93bf520079bae16f10ef90f9e0b4be2",
				"dweb:/ipfs/QmXSZsvADwrGfrUzJkcAj67z5A3JtpjRC94cqSWnjvGLtL"
			]
		},
		"src/uln/interfaces/IDVNFeeLib.sol": {
			"keccak256": "0x0ca290b8e420f9ee8e0a4fbd27dcd6574ccea8dd948c30bbcce50a6c26fef6bf",
			"license": "MIT",
			"urls": [
				"bzz-raw://cde4a7c4b53867514c532f739feaee5b836721d8d55c70ce40e933e7d02fc53c",
				"dweb:/ipfs/QmVX2ExKonRyjUv9UGLQvcZgd6nbfmiyurrDmNd24fSWGx"
			]
		},
		"src/uln/interfaces/ILayerZeroDVN.sol": {
			"keccak256": "0xcf2075ecb1bdc530ee93b73d978ae48f0c6e956d6ce03deee3e59f2a8a9b9347",
			"license": "MIT",
			"urls": [
				"bzz-raw://4aea70d860ffecb688ffe3993f6b3f12383a646ec39974205eb2d47f1b612059",
				"dweb:/ipfs/QmemSrg2N4dRz4pQrvJex9y7ArirPStExaouJmNuMQhXk3"
			]
		},
		"src/uln/interfaces/IReceiveUlnE2.sol": {
			"keccak256": "0x8029b763decb7e7aa87d5958a959f7b211a4abea2abc96eee92f296faf4588ac",
			"license": "MIT",
			"urls": [
				"bzz-raw://58acdf251938cf804b827ef06bae8bf7f5c8d03a41787e518f49ab5a8b640c8b",
				"dweb:/ipfs/QmTq1ia157zApQYhiwaSanDxi9aNytRGRLpLXzXShcxwkn"
			]
		}
	},
	"version": 1
}